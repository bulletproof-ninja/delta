plugins {
    id "com.jfrog.bintray" version "1.8.1"
}

ext {
    getScalaFull = [
        '2.11': '2.11.12',
        '2.12': '2.12.10',
        '2.13': '2.13.0'
    ]

    vScala = System.properties.scalaVersion ?: '2.12'
    vScalaFull = getScalaFull[vScala]
    vScuff = '6.1.0'
    vScalaTest = '3.0.6'
    vScalaJava8Compat = '0.9.0'
    vSilencer = '1.4.3'
}

if (version == '') {
    version = 'SNAPSHOT'
}
if (version == 'SNAPSHOT') {
    version = tsVersion(version)
}

def tsVersion(version) {
    java.text.SimpleDateFormat tsFmt = new java.text.SimpleDateFormat('yyMMddHHmm')
    tsFmt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
    return "${version}-b${tsFmt.format(new Date())}"
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    version = rootProject.version

    repositories {
        mavenLocal()
        jcenter()
    }
    
    configurations {
	    scalacPlugin {
	        transitive = false
	    }
    }
    dependencies {
        compile "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "junit:junit:4.12"
        testCompile "org.slf4j:slf4j-simple:1.7.26"

        compileOnly "com.github.ghik:silencer-lib_$vScalaFull:$vSilencer"
        testCompileOnly "com.github.ghik:silencer-lib_$vScalaFull:$vSilencer"
        scalacPlugin "com.github.ghik:silencer-plugin_$vScalaFull:$vSilencer"    
    }

	tasks.withType(Jar) {
	    baseName = "${project.name}_$vScala"
	}

	tasks.withType(ScalaCompile) {
	    def args = System.properties.compilerArgs ?: "-feature -deprecation -explaintypes -unchecked -Xlint"
	    scalaCompileOptions.additionalParameters = args.split(" ").toList()
	}

    jar {
        manifest {
            attributes "Implementation-Title": project.name, "Implementation-Version": version
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from project.sourceSets.main.allScala
    }
    task docsJar(type: Jar, dependsOn: scaladoc) {
        classifier "docs"
        from project.scaladoc.destinationDir
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId System.properties.mavenGroupId ?: ""
                artifactId "${project.name}_$vScala"

                from components.java
                artifact sourceJar
                if (vScala != '2.13') {
                    artifact docsJar
                }
            }
        }
    }

    bintray {
        user = System.properties.bintrayUser ?: "dryrun"
        key = System.properties.bintrayKey ?: "dryrun"
        dryRun = (user == "dryrun" || key == "dryrun" || version.contains('SNAPSHOT'))
        publish = !dryRun
        override = true
        publications = ['maven']
        pkg {
            userOrg = System.properties.bintrayOrg ?: user
            repo = "maven"
            name = "Delta"
        }
    }

    test {
        systemProperties System.properties
        testLogging {
            exceptionFormat = 'full'
        }
    }

}

dependencies {
    compile "ninja.bulletproof:scuff_$vScala:$vScuff"
}

subprojects {
    dependencies {
        testCompile rootProject.sourceSets.test.output
        compile rootProject
    }
}

wrapper {
    gradleVersion = '5.6.2'
}

project(':delta-cassandra') {
    dependencies {
        compile "com.datastax.cassandra:cassandra-driver-core:3.7.2"
    }
}

project(':delta-jdbc') {
    dependencies {
        testCompile "com.h2database:h2:1.4.199"
        testCompile "org.apache.derby:derby:10.12.1.1"
        testCompile "mysql:mysql-connector-java:8.0.16"
        testCompile "org.postgresql:postgresql:42.2.4"
        testCompile "com.microsoft.sqlserver:mssql-jdbc:7.2.2.jre8"
    }
}

project(':delta-hazelcast') {
    dependencies {
        compile "com.hazelcast:hazelcast:3.11.1"
    }
}

project(':delta-redis') {
    dependencies {
        compile "redis.clients:jedis:3.0.1"
    }
}

if (vScala != '2.11') {
    project(':delta-java') {
        dependencies {
            testCompile project(":delta-jdbc")
        }
    }
}

project(':delta-mongodb') {
    dependencies {
        compile "org.mongodb:mongodb-driver-async:3.11.0"
        compile "org.mongodb.scala:mongo-scala-bson_$vScala:2.7.0"
        // compile "org.mongodb:mongodb-driver-reactivestreams:1.11.0"
    }
}

