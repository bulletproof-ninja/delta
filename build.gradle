plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

ext {
    getScalaFull = [
        '2.11': '2.11.9',
        '2.12': '2.12.1'
    ]

    vScala = System.properties.scalaVersion ?: '2.11'
    vScalaFull = getScalaFull[vScala]
    vScuff = '1.1.3'
}

if (version == '') {
    version = 'SNAPSHOT'
}
if (version == 'SNAPSHOT') {
    version = tsVersion(version)
}

def tsVersion(version) {
    java.text.SimpleDateFormat tsFmt = new java.text.SimpleDateFormat('yyMMddHHmm')
    tsFmt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
    return "${version}-b${tsFmt.format(new Date())}"
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.7
    if (vScala == '2.11') {
        targetCompatibility = 1.7
    } else {
        targetCompatibility = 1.8
    }

    version = rootProject.version

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        compileOnly "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "junit:junit:4.+"
        testCompile "org.mockito:mockito-all:1.10.+"
        testCompile "com.propensive:rapture-json-jackson_$vScala:2.0.+"
    }

	tasks.withType(Jar) {
	    baseName = "${project.name}_$vScala"
	}

	tasks.withType(ScalaCompile) {
	    def args = System.properties.compilerArgs ?: "-feature -deprecation -explaintypes -unchecked -Xlint"
	    scalaCompileOptions.additionalParameters = args.split(" ").toList()
	}

    jar {
        manifest {
            attributes "Implementation-Title": project.name, "Implementation-Version": version
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from project.sourceSets.main.allScala
    }
    task docsJar(type: Jar, dependsOn: scaladoc) {
        classifier "docs"
        from project.scaladoc.destinationDir
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId System.properties.mavenGroupId ?: ""
                artifactId "${project.name}_$vScala"

                from components.java
                artifact sourceJar
                artifact docsJar
            }
        }
    }

    bintray {
        user = System.properties.bintrayUser ?: "dryrun"
        key = System.properties.bintrayKey ?: "dryrun"
        dryRun = (user == "dryrun" || key == "dryrun" || version.startsWith('SNAPSHOT'))
        publish = !dryRun
        publications = ['maven']
        pkg {
            userOrg = System.properties.bintrayOrg ?: user
            repo = "maven"
            name = "Delta"
        }
    }

}

dependencies {
    compile "ninja.bulletproof:scuff_$vScala:$vScuff"
}

subprojects {
    dependencies {
        testCompile rootProject.sourceSets.test.output
        compile rootProject
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

project(':delta-cassandra') {
    dependencies {
        compile "com.datastax.cassandra:cassandra-driver-core:3.1.4"
    }
}
project(':delta-jdbc') {
    dependencies {
        testCompile "com.h2database:h2:1.4.+"
        testCompile "org.apache.derby:derby:10.12.+"
        testCompile "mysql:mysql-connector-java:5.1.40"
    }
}
project(':delta-mongodb') {
    dependencies {
        compile "org.mongodb:mongodb-driver-async:3.4.2"
        compile "org.mongodb.scala:mongo-scala-bson_$vScala:1.2.1"
    }
}
project(':delta-hazelcast') {
    dependencies {
        compile "com.hazelcast:hazelcast:3.7.5"
    }
}
project(':delta-redis') {
    dependencies {
        compile "redis.clients:jedis:2.9.0"
        //compile "io.vertx:vertx-redis-client:3.4.1"
        //compile "biz.paluch.redis:lettuce:4.3.1.Final"
    }
}
